diff --git a/api/src/main/java/org/openmrs/api/ProviderService.java b/api/src/main/java/org/openmrs/api/ProviderService.java
index 5d7ffef8b..2a166769c 100644
--- a/api/src/main/java/org/openmrs/api/ProviderService.java
+++ b/api/src/main/java/org/openmrs/api/ProviderService.java
@@ -17,6 +17,7 @@ import org.openmrs.Person;
 import org.openmrs.Provider;
 import org.openmrs.ProviderAttribute;
 import org.openmrs.ProviderAttributeType;
+import org.openmrs.User;
 import org.openmrs.annotation.Authorized;
 import org.openmrs.annotation.Handler;
 import org.openmrs.util.PrivilegeConstants;
@@ -321,4 +322,6 @@ public interface ProviderService extends OpenmrsService {
 	 */
 	@Authorized( { PrivilegeConstants.GET_PROVIDERS })
 	public Provider getUnknownProvider();
+	
+	public Provider createProviderFromUser(User user);
 }
diff --git a/api/src/main/java/org/openmrs/api/impl/ProviderServiceImpl.java b/api/src/main/java/org/openmrs/api/impl/ProviderServiceImpl.java
index a4ef63fb5..79241739d 100644
--- a/api/src/main/java/org/openmrs/api/impl/ProviderServiceImpl.java
+++ b/api/src/main/java/org/openmrs/api/impl/ProviderServiceImpl.java
@@ -17,6 +17,7 @@ import org.openmrs.Person;
 import org.openmrs.Provider;
 import org.openmrs.ProviderAttribute;
 import org.openmrs.ProviderAttributeType;
+import org.openmrs.User;
 import org.openmrs.api.APIException;
 import org.openmrs.api.ProviderService;
 import org.openmrs.api.context.Context;
@@ -25,7 +26,8 @@ import org.openmrs.customdatatype.CustomDatatypeUtil;
 import org.openmrs.util.OpenmrsConstants;
 import org.openmrs.util.OpenmrsUtil;
 import org.springframework.transaction.annotation.Transactional;
-
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
 /**
  * Default implementation of the {@link ProviderService}. This class should not be used on its own.
  * The current OpenMRS implementation should be fetched from the Context.
@@ -36,7 +38,7 @@ import org.springframework.transaction.annotation.Transactional;
 public class ProviderServiceImpl extends BaseOpenmrsService implements ProviderService {
 	
 	private ProviderDAO dao;
-	
+	private static final Logger log = LoggerFactory.getLogger(ProviderServiceImpl.class);
 	/**
 	 * Sets the data access object for Concepts. The dao is used for saving and getting concepts
 	 * to/from the database
@@ -293,4 +295,18 @@ public class ProviderServiceImpl extends BaseOpenmrsService implements ProviderS
 		return getProviderByUuid(Context.getAdministrationService().getGlobalProperty(
 		    OpenmrsConstants.GP_UNKNOWN_PROVIDER_UUID));
 	}
+
+	@Override
+	public Provider createProviderFromUser(User user) {
+		Provider p = new Provider();
+		if (user == null || user.getPerson() == null) {
+			throw new APIException("User can not be null");
+		} else if (Context.getProviderService().getProvidersByPerson(user.getPerson()).isEmpty()) {
+			p.setPerson(user.getPerson());
+			return Context.getProviderService().saveProvider(p);
+		} else {
+			log.warn("Provider already exists for user");
+			return Context.getProviderService().getProvidersByPerson(user.getPerson()).iterator().next();
+		}
+	}
 }
diff --git a/api/src/test/java/org/openmrs/api/ProviderServiceTest.java b/api/src/test/java/org/openmrs/api/ProviderServiceTest.java
index bebf7e07b..a1a2882c7 100644
--- a/api/src/test/java/org/openmrs/api/ProviderServiceTest.java
+++ b/api/src/test/java/org/openmrs/api/ProviderServiceTest.java
@@ -33,6 +33,7 @@ import org.openmrs.PersonName;
 import org.openmrs.Provider;
 import org.openmrs.ProviderAttribute;
 import org.openmrs.ProviderAttributeType;
+import org.openmrs.User;
 import org.openmrs.api.context.Context;
 import org.openmrs.customdatatype.datatype.FreeTextDatatype;
 import org.openmrs.test.BaseContextSensitiveTest;
@@ -519,5 +520,38 @@ public class ProviderServiceTest extends BaseContextSensitiveTest {
 		person.setNames(personNames);
 		return person;
 	}
+
+	@Test
+	public void createProviderFromUser_shouldGetUserAndCreateProvider() {
+		User u = Context.getUserService().getUser(19901);
+		assertNotNull(Context.getPersonService().getPerson(19901));
+		assertNotNull(Context.getPersonService().getPersonName(19901));
+		assertNotNull(u);
+		Provider p = Context.getProviderService().createProviderFromUser(u);
+		assertNotNull(p);		
+	}
+	
+	@Test
+	public void createProviderFromUser_shouldThrowErrorsWhenUserIsNull() {
+		try {
+			User u = Context.getUserService().getUser(1337);
+			Context.getProviderService().createProviderFromUser(u);
+		} catch (APIException e) {
+			assertEquals("User can not be null", e.getMessage());
+		}
+	}
+	
+	@Test
+	public void createProviderFromUser_shouldReturnProviderifUserExists(){
+		User u = Context.getUserService().getUser(19901);
+		assertNotNull(u);
+		Provider p = Context.getProviderService().createProviderFromUser(u);
+		assertNotNull(p);
+		int numberOfProviderBefore = Context.getProviderService().getAllProviders().size();
+		Provider p2 = Context.getProviderService().createProviderFromUser(u);
+		assertNotNull(p2);
+		assertEquals(Context.getProviderService().getAllProviders().size(), numberOfProviderBefore);
+		assertEquals(p2, p);
+	}
 	
 }
diff --git a/api/src/test/resources/org/openmrs/api/include/ProviderServiceTest-initial.xml b/api/src/test/resources/org/openmrs/api/include/ProviderServiceTest-initial.xml
index 79b5c7855..5535da9d6 100644
--- a/api/src/test/resources/org/openmrs/api/include/ProviderServiceTest-initial.xml
+++ b/api/src/test/resources/org/openmrs/api/include/ProviderServiceTest-initial.xml
@@ -20,10 +20,11 @@
   <provider provider_id="7" 	name="provider7" person_id="501" identifier="8C761" creator="1" 	date_created="2005-01-01 00:00:00.0" retired="0" uuid="161b3002-6b95-11e0-93c3-18a905e044dc" />
   <provider provider_id="8" 	name="provider8" person_id="502" identifier="8C762" creator="1" 	date_created="2005-01-01 00:00:00.0" retired="0" uuid="1f9e8336-6b95-11e0-93c3-18a905e044dc" />
   <provider provider_id="9" 	name="provider8" person_id="2" identifier="8C763" creator="1" 	date_created="2005-01-01 00:00:00.0" retired="1" uuid="1f9e8336-6b95-11e0-93c3-18a905e044dn" />
+  <person person_id="19901" gender="M" dead="false" creator="1" birthdate_estimated="0" date_created="2017-08-15 15:57:09.0" voided="false" uuid="86526ed6-3c11-11de-a0ba-001e378rr98ur"/>
+  <person_name person_name_id="19901" preferred="true" person_id="19901" prefix="Mr." given_name="icap" middle_name="" family_name="tech" family_name_suffix="Esq." creator="1" date_created="2005-09-22 00:00:00.0" voided="false" uuid="399e3a7b-6482-487d-94ce-c07bb3ca3uir2"/>
   <person_name person_name_id="9352" preferred="true" person_id="2" prefix="Mr." given_name="william" middle_name="" family_name="williamson" family_name_suffix="Esq." creator="1" date_created="2005-09-22 00:00:00.0" voided="true" void_reason="changed" uuid="399e3a7b-6482-487d-94ce-c07bb3ca3ccw9"/>
   <person_name person_name_id="9353" preferred="false" person_id="7" given_name="Collet" middle_name="james" family_name="Hussey" family_name2="Ricky" creator="1" date_created="2006-01-18 00:00:00.0" voided="true" void_reason="Changed" uuid="a65c347e-1384-493a-a55b-d325924acd9w"/>
-
   <provider_attribute_type provider_attribute_type_id="1" name="place" datatype="org.openmrs.customdatatype.datatype.FreeTextDatatype" uuid="058d4dcf-7bb0-41f4-93b6-d49580ed9ea6" creator="1" date_created="2005-01-01 00:00:00.0" min_occurs="0" retired="false"/>
   <provider_attribute provider_attribute_id="321" provider_id="2" attribute_type_id="1" value_reference="2011-04-25" uuid="823382cd-5faa-4b57-8b34-fed33b9c8c65" creator="1" date_created="2005-01-01 00:00:00.0" voided="false" />
-
+  <users user_id="19901" person_id="19901" system_id="icap" username="icaptechTeam" password="eeeda5c0cc3837151b2d61cfeab54a91fb0c27d" salt="42af4c437a47cd778a54f6564d71b3cd6e8e5ca" secret_question="" creator="1" date_created="2008-08-15 15:57:09.0" changed_by="1" date_changed="2008-08-18 11:51:56.0" retired="false" uuid="c98a1558-e131-11de-babe-001e378eu67d"/>
 </dataset>
